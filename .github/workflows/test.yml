name: test

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*'
    pull_request:
      branches:
        - master

jobs:
  test:
    name: Python ${{ matrix.python-version }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.7', '3.8']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ensure latest pip
        run: python -m pip install --upgrade pip

      - name: Install hatch
        run: |
          pip install hatch
      - name: Run tests
        run: hatch run cov

  simulate_script:
    name: Simulate script ${{ matrix.script }} with Python ${{ matrix.python-version }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.8' ]
        script: [ 'robotmanager-server', 'robotmanager-calibrator']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ensure latest pip
        run: python -m pip install --upgrade pip

      - name: Install hatch
        run: |
          pip install hatch
      - name: Install package
        run: pip install .

      - name: Desktop shorcut setup
        run: python -m covmatic_robotmanger.setup

      - name: Execute script ${{ matrix.script }}
        run: ${{ matrix.script }} --test-only --eva-ip "TEST" --eva-token "TEST"

  upload:
    if: ${{ startsWith( github.ref , 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    container: python:3.8
    needs: simulate_script
    steps:
      - uses: actions/checkout@v2
      - name: Ensure latest pip
        run: python -m pip install --upgrade pip
      - name: Install hatch
        run: |
          pip install hatch
      - name: Build
        run: hatch build
      - name: Install Twine
        run: python -m pip install twine
      - name: Upload
        run: python -m twine upload --verbose dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}
          TWINE_REPOSITORY: ${{ secrets.TWINE_REPOSITORY }}
          TWINE_NON_INTERACTIVE: 1
